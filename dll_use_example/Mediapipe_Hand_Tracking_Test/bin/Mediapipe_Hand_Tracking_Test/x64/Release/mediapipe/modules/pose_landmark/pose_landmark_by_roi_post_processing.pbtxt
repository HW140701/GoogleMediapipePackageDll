# MediaPipe graph performing tensor post processing to detect/predict pose
# landmarks.
#
# EXAMPLE:
#   node {
#     calculator: "PoseLandmarkByRoiPostProcessing"
#     input_stream: "TENSORS:tensors"
#     input_stream: "ROI:roi"
#     input_stream: "LETTERBOX_PADDING:letterbox_padding"
#     output_stream: "LANDMARKS:landmarks"
#     output_stream: "AUXILIARY_LANDMARKS:auxiliary_landmarks"
#   }

type: "PoseLandmarkByRoiPostProcessing"

# Tensors from model inference of pose_landmark_{full|heavy|lite}.tflite.
# (std::vector<Tensor>)
input_stream: "TENSORS:tensors"

# ROI (region of interest) within a given image, where only the ROI is used as
# input to model inference but the resulting pose landmarks are to be reported
# in coordinates w.r.t. the entire image. (NormalizedRect)
input_stream: "ROI:roi"

# An array representing the letterbox padding from the 4 sides, i.e.,
# [left, top, right, bottom], padded around the ROI above before it is used as
# input to model inference. The padding is normalized to [0.f, 1.f] relatvie to
# the ROI dimensions. (std::array<float, 4>)
input_stream: "LETTERBOX_PADDING:letterbox_padding"

# Pose landmarks within the given ROI. (NormalizedLandmarkList)
# We have 33 landmarks (see pose_landmark_topology.svg) and there are other
# auxiliary key points.
# 0 - nose
# 1 - left eye (inner)
# 2 - left eye
# 3 - left eye (outer)
# 4 - right eye (inner)
# 5 - right eye
# 6 - right eye (outer)
# 7 - left ear
# 8 - right ear
# 9 - mouth (left)
# 10 - mouth (right)
# 11 - left shoulder
# 12 - right shoulder
# 13 - left elbow
# 14 - right elbow
# 15 - left wrist
# 16 - right wrist
# 17 - left pinky
# 18 - right pinky
# 19 - left index
# 20 - right index
# 21 - left thumb
# 22 - right thumb
# 23 - left hip
# 24 - right hip
# 25 - left knee
# 26 - right knee
# 27 - left ankle
# 28 - right ankle
# 29 - left heel
# 30 - right heel
# 31 - left foot index
# 32 - right foot index
#
# NOTE: if a pose is not present within the given ROI, for this particular
# timestamp there will not be an output packet in the LANDMARKS stream. However,
# the MediaPipe framework will internally inform the downstream calculators of
# the absence of this packet so that they don't wait for it unnecessarily.
output_stream: "LANDMARKS:landmarks"
# Auxiliary landmarks for deriving the ROI in the subsequent image.
# (NormalizedLandmarkList)
output_stream: "AUXILIARY_LANDMARKS:auxiliary_landmarks"

# Pose world landmarks within the given ROI. (LandmarkList)
# World landmarks are real-world 3D coordinates in meters with the origin at the
# center between hips. WORLD_LANDMARKS shares the same landmark topology as
# LANDMARKS. However, LANDMARKS provides coordinates (in pixels) of a 3D object
# projected onto the 2D image surface, while WORLD_LANDMARKS provides
# coordinates (in meters) of the 3D object itself.
output_stream: "WORLD_LANDMARKS:world_landmarks"

# Splits a vector of TFLite tensors to multiple vectors according to the ranges
# specified in option.
node {
  calculator: "SplitTensorVectorCalculator"
  input_stream: "tensors"
  output_stream: "landmark_tensors"
  output_stream: "pose_flag_tensor"
  output_stream: "heatmap_tensor"
  output_stream: "world_landmark_tensors"
  options: {
    [mediapipe.SplitVectorCalculatorOptions.ext] {
      ranges: { begin: 0 end: 1 }
      ranges: { begin: 1 end: 2 }
      ranges: { begin: 3 end: 4 }
      ranges: { begin: 4 end: 5 }
    }
  }
}

# Converts the pose-flag tensor into a float that represents the confidence
# score of pose presence.
node {
  calculator: "TensorsToFloatsCalculator"
  input_stream: "TENSORS:pose_flag_tensor"
  output_stream: "FLOAT:pose_presence_score"
}

# Applies a threshold to the confidence score to determine whether a pose is
# present.
node {
  calculator: "ThresholdingCalculator"
  input_stream: "FLOAT:pose_presence_score"
  output_stream: "FLAG:pose_presence"
  options: {
    [mediapipe.ThresholdingCalculatorOptions.ext] {
      threshold: 0.5
    }
  }
}

# Drops landmark tensors if pose is not present.
node {
  calculator: "GateCalculator"
  input_stream: "landmark_tensors"
  input_stream: "world_landmark_tensors"
  input_stream: "ALLOW:pose_presence"
  output_stream: "ensured_landmark_tensors"
  output_stream: "ensured_world_landmark_tensors"
}

# Decodes the landmark tensors into a vector of landmarks, where the landmark
# coordinates are normalized by the size of the input image to the model.
node {
  calculator: "TensorsToLandmarksCalculator"
  input_stream: "TENSORS:ensured_landmark_tensors"
  output_stream: "NORM_LANDMARKS:raw_landmarks"
  options: {
    [mediapipe.TensorsToLandmarksCalculatorOptions.ext] {
      num_landmarks: 39
      input_image_width: 256
      input_image_height: 256
      visibility_activation: SIGMOID
      presence_activation: SIGMOID
    }
  }
}

# Refines landmarks with the heatmap tensor.
node {
  calculator: "RefineLandmarksFromHeatmapCalculator"
  input_stream: "NORM_LANDMARKS:raw_landmarks"
  input_stream: "TENSORS:heatmap_tensor"
  output_stream: "NORM_LANDMARKS:refined_landmarks"
  options: {
    [mediapipe.RefineLandmarksFromHeatmapCalculatorOptions.ext] {
      kernel_size: 7
    }
  }
}

# Adjusts landmarks (already normalized to [0.f, 1.f]) on the letterboxed pose
# image (after image transformation with the FIT scale mode) to the
# corresponding locations on the same image with the letterbox removed (pose
# image before image transformation).
node {
  calculator: "LandmarkLetterboxRemovalCalculator"
  input_stream: "LANDMARKS:refined_landmarks"
  input_stream: "LETTERBOX_PADDING:letterbox_padding"
  output_stream: "LANDMARKS:adjusted_landmarks"
}

# Projects the landmarks from the cropped pose image to the corresponding
# locations on the full image before cropping.
node {
  calculator: "LandmarkProjectionCalculator"
  input_stream: "NORM_LANDMARKS:adjusted_landmarks"
  input_stream: "NORM_RECT:roi"
  output_stream: "NORM_LANDMARKS:all_landmarks"
}

# Splits the landmarks into two sets: the actual pose landmarks and the
# auxiliary landmarks.
node {
  calculator: "SplitNormalizedLandmarkListCalculator"
  input_stream: "all_landmarks"
  output_stream: "landmarks"
  output_stream: "auxiliary_landmarks"
  options: {
    [mediapipe.SplitVectorCalculatorOptions.ext] {
      ranges: { begin: 0 end: 33 }
      ranges: { begin: 33 end: 35 }
    }
  }
}

# Decodes the world landmark tensors into a vector of world landmarks.
node {
  calculator: "TensorsToLandmarksCalculator"
  input_stream: "TENSORS:ensured_world_landmark_tensors"
  output_stream: "LANDMARKS:raw_world_landmarks"
  options: {
    [mediapipe.TensorsToLandmarksCalculatorOptions.ext] {
      num_landmarks: 39
    }
  }
}

# Reuses the visibility and presence field in pose landmarks for the world
# landmarks.
node {
  calculator: "VisibilityCopyCalculator"
  input_stream: "NORM_LANDMARKS_FROM:raw_landmarks"
  input_stream: "LANDMARKS_TO:raw_world_landmarks"
  output_stream: "LANDMARKS_TO:raw_world_landmarks_with_visibility"
  options: {
    [mediapipe.VisibilityCopyCalculatorOptions.ext] {
      copy_visibility: true
      copy_presence: true
    }
  }
}

# Projects the world landmarks from the cropped pose image to the corresponding
# locations on the full image before cropping.
node {
  calculator: "WorldLandmarkProjectionCalculator"
  input_stream: "LANDMARKS:raw_world_landmarks_with_visibility"
  input_stream: "NORM_RECT:roi"
  output_stream: "LANDMARKS:all_world_landmarks"
}

# Takes only actual world landmarks.
node {
  calculator: "SplitLandmarkListCalculator"
  input_stream: "all_world_landmarks"
  output_stream: "world_landmarks"
  options: {
    [mediapipe.SplitVectorCalculatorOptions.ext] {
      ranges: { begin: 0 end: 33 }
    }
  }
}
